/*!

@page PluginFramework cedar's Plugin Framework

@todo This is just a sketch, needs more detail.

cedar's plugin framework is extensible and flexible. Its main functionality comes from two concepts: factory managers,
which can dynamically allocate objects of different classes that share a common base class; and, declarations, which
enrich such factories with additional information.

Factory managers (cedar::aux::FactoryManager) store associations between string identifiers and factories
(cedar::aux::Factory). Factories, in turn, can be used to create new objects of a specific class at runtime.
Thus, factory managers are responsible for dynamically allocating objects of different types at run time (i.e., you can
ask a factory manager to create an object of a type that is specified by the user).

Plugins use declarations (cedar::aux::PluginDeclaration) to declare new classes that can be added to factory managers if
the user chooses to load a plugin. They may also contain additional information, such as a description of the class they
declare.

*/