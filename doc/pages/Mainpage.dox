/*!

@mainpage Cognition, embodiment, dynamics, and autonomy for robots
Welcome to cedar!

@section Motivation Motivation
cedar is a C++ library that provides tools for scientific work in the fields of cognition, embodiment, dynamical
systems, and autonomous robotics. cedar is primarily being developed at the Institut fuer Neuroinformatik in Bochum,
Germany. It is a complete rewrite of a collection of powerful code, yet somewhat fragmented code. cedar now captures
our scientific knowledge and ideology in a coherent framework. A lot of effort goes into keeping the different parts
of cedar compatible to each other. Linking up perception and motor control of a robot and putting some cognitive
processing in between should not be constrained by programming issues, but only be a question of applied concepts.
cedar provides a tool aimed at facilitating the connection of modules to create robotic architectures. You can focus
on "what" to connect, keeping the effort of "how" to connect it very low.

@section ProgrammingConcepts Programming concepts
In the following papes you can find out about general programming concepts we used throughout the framework.
- @link EnumConcept Threads and dynamics @endlink
- @link InterProcessCommunicationConcept Inter-process communication using YARP @endlink
- @link ParametersConcept Storing and loading parameters @endlink
- @link ProcessingFrameworkConcept Processing framework @endlink
- @link ThreadingConcept Threads and dynamics @endlink
- @link UnitsConcept Physical units @endlink

@section OrganizationalConcepts Organizational concepts
In these pages you can learn more about the structure and organization of cedar.
- @link FolderStructureConcept Folder structure @endlink
- @link ReleasesConcept Release work flow @endlink
- @link SoftwareTestingConcept Software testing @endlink

@section Tutorials Tutorials
We provide a number of tutorials for certain parts of cedar, for which some additional guidance may be
beneficial or even necessary.
- @link ProcessingFrameworkTutorial Processing framework @endlink

@section CodingStyle Coding Style
cedar sticks to a strict @link CodingStyle coding style @endlink.

@section Installation Installing cedar
Please refer to the "readme.txt" file in the root of the repository to find instructions on how to install cedar.

@section Documentation How to get this documentation
This documentation is included in your copy of cedar. cmake will create a Doxyfile in your build folder. You need
Doxygen to create this documentation from the generated Doxyfile (see "readme.txt" file for more information about
the build system). Doxygen will create an HTML and a PDF output of the code documentation and additional pages like
this introductory page. Feel free to browse through the class documentation, or just dig into the concepts incorporated
in the implementation. You can also start with one of our tutorials, to get accustomed to the ways cedar can be used.

*/