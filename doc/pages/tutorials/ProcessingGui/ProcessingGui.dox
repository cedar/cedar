/*!

@page ProcessingGuiTutorial Tutorials for the Processing Gui

This page offers several tutorials for using cedar's processing gui. A detailed description of the framework can
be found at @ref ProcessingFrameworkConcept. The processing gui is one out of three ways in which the processing 
framework can be used. The graphical interface does not require knowledge of a programming language and is thus well 
suited for users of different scientific background. 

This page contains the following sections:

<ol>
  <li>@ref GuiTutorialFirstStep</li>
  <li>@ref GuiTutorialSecondStep</li>
  <li>@ref GuiTutorialThirdStep</li>
  <li>@ref GuiTutorialFourthStep</li>
</ol>

@section GuiTutorialFirstStep Tutorial: Starting the Gui 

In this section, we will describe how to find and run the processing gui. Before using the processing gui, you have to
compile a version of cedar or look for an installed version. The processing gui can be found in the binaries folder of 
cedar (the default name is \b bin). There you will find an executable name processingIde (with an additional file 
extension on some operating systems). Executing this file opens up the main window of the processing gui. You are now 
ready to make your first steps with this tool.

@section GuiTutorialSecondStep Tutorial: Understanding the components of the main window
Have a look at the following picture of a freshly started processing gui (note that the arrangement of areas may differ):
@image html doc/pages/tutorials/ProcessingFramework/images/processingIde_areas.png
The central part of the main window is the \b architecture assembly. Here, building blocks can be added from the 
\b elements area by dragging them onto the architecture area. Elements can be selected by left-clicking onto an element 
or left-clicking in the area and selecting multiple elements in a dragged rectangle. Some elements require a double-click
if you want to select them (this applies to any kind of trigger). If only a single element is selected and this elements
provides parameters, the list of available parameters appears in the \b properties area.

@section GuiTutorialThirdStep Tutorial: Understanding the representation of elements
Everything that can be added to an architecture is called an element. Currently, there are three different types of 
elements:
<ol>
  <li>processing steps</li>
  <li>networks</li>
  <li>triggers</li>
</ol> 
\b Processing \b steps represent a unit of processing in an architecture. For example, applying a filter operation on 
an image matrix is considered a processing step. Processing steps process specific childrens of cedar::aux::Data. The nature
of a step defines the data it can meaningfully process. Steps may have input and output \b slots. These define how data
flows into and out of the step. If a step does not provide any input slots, it is considered as a \b source. In contrast,
not providing an output renders a step a \b drain. You can connect up an output slot of a step with an input step of a
second step by left-clicking onto the output slot and, while keeping the mouse button pressed, dragging a line to an
input slot. All available input slots will be highlighted and color-coded. This color code states the compatibility
of the two slots (see @ref ProcessingIntroduction_DataAndConnections).

\b Networks group processing steps into a processing group with defined inputs and outputs. Networks will be copyable in
future releases of cedar. You can add elements to a network by choosing <i>group into new network</i> or 
<i>move to existing network</i> from the right-click menu of an element. You can also promote output and input slots of 
steps to output and input slots of the network by right-clicking on the respective slot and choosing <i>promote slot</i>.

\b Triggers manage the time course of processing. They trigger a processing step when another processing step has done 
its work or trigger a time-varying dynamics whenever a time interval elapsed. cedar::proc::LoopedTrigger provides the latter
functionality. You can connect up triggers by left-clicking on them and, while still keeping the mouse button pressed,
drag a line to any suitable element that is highlighted in the gui. You can start and stop a cedar::proc::LoopedTrigger
by right-clicking onto the trigger and /b choosing start or /b stop. The trigger changes from white to green once it is
started. Triggers play an additional role in multi-threading.

At any time, you can remove elements from an architecture by first selecting them and subsequently pressing \b delete 
on your keyboard.

@section GuiTutorialFourthStep Tutorial: Assembling a simple architecture
Start assembling the simple architecture by clicking on the \b sources tab of the elements area and drag a cedar::proc::sources::GaussInput
into the architecture area. A new elements of this class pops upin the middle of the area. Go to the \b fields tab and 
drag a cedar::dyn::NeuralField onto the area as well. Note that GaussInput provides an output slot, while
NeuralField has both an output and an input slot. Create a connection between the output slot of the GaussInput to the input
of NeuralField. A yellow colored connection should appear, linking up these two slots. Now add a cedar::proc::LoopedTrigger
from the \b triggers tab. Connect the LoopedTrigger to the NeuralField. Start the LoopedTrigger by right-clicking and
choosing \b start. The architecture is now running. You can inspect the ongoing processing in NeuralField by right-clicking
on the element and choosing <i>plot all</i>. If you change the <i>center</i> property of the GaussInput, you can see how
a change in input affects the neural field. 
*/