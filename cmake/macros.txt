########################################################################################################################
# CMake macros for cedar
########################################################################################################################


########################################################################################################################

macro(cedar_add_unit_test arguments)
  set(currentDirectory ${CMAKE_CURRENT_SOURCE_DIR})
  string(REGEX REPLACE ".*/(.+)$" "\\1" unitTestName "${currentDirectory}")

  file(GLOB sourceFiles ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp)

  string(REPLACE "${CEDAR_UNIT_TEST_DIR}/" "" unitTestSubdirectory "${currentDirectory}")
  string(REPLACE "/${unitTestName}" "" unitTestSubdirectory "${unitTestSubdirectory}")

  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CEDAR_EXE_DIR}/${unitTestSubdirectory})

  set(unitTestExecutableName unitTest_${unitTestName})
  
  # add_executable(<executable name> [WIN32] [MACOSX_BUNDLE] [EXCLUDE_FROM_ALL] source1 source2 ... sourceN)
  add_executable(${unitTestExecutableName} ${sourceFiles})
  
  # add_test(<test identifier> <executable name> <arguments for the test>)
  add_test(${unitTestName} ${CMAKE_COMMAND} -E chdir ${CEDAR_UNIT_TEST_DIR}/${unitTestSubdirectory}/${unitTestName} ${CEDAR_EXE_DIR}/${unitTestSubdirectory}/${unitTestExecutableName} ${arguments})
  
  string(REGEX REPLACE "([^/]+)(/[^/]*)*$" "\\1" libraryName "${unitTestSubdirectory}")
  
  target_link_libraries(${unitTestExecutableName} auxiliaries devices ${QT_LIBRARIES} config++ ${Boost_LIBRARIES} ${OpenCV_LIBS})
  
  set (CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CEDAR_EXE_DIR})
endmacro(cedar_add_unit_test)


########################################################################################################################

macro(cedar_get_subdirectories path)
  file(GLOB returnedSubdirectories ${path}/*/)
  list(LENGTH returnedSubdirectories numberOfSubdirectories)

  if (numberOfSubdirectories GREATER 0)
    list(REMOVE_ITEM returnedSubdirectories "${path}/.svn")
    foreach (subdirectory ${returnedSubdirectories})
      if (NOT IS_DIRECTORY ${subdirectory})
        list(REMOVE_ITEM returnedSubdirectories "${subdirectory}")
      endif(NOT IS_DIRECTORY ${subdirectory})
    endforeach(subdirectory)
  endif (numberOfSubdirectories GREATER 0)
endmacro(cedar_get_subdirectories)

