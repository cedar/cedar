########################################################################################################################
# CMake setup of cedar
########################################################################################################################


########################################################################################################################
# general settings

# set the project name
project(cedar)

# clear list of libraries; this will be filled in the subdirectories
unset(CedarLibraries)
unset(CedarSources)

########################################################################################################################
# add preprocessor definitions 

add_definitions(-Wall)
add_definitions(-D CEDAR_LOG_DIR=\\"${CEDAR_LOG_DIR}/\\")

########################################################################################################################
# default output directory for lib files
if (CEDAR_LIB_DIR)
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CEDAR_LIB_DIR}/${CMAKE_BUILD_TYPE}" CACHE STRING "Lib output directory" ${F})
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CEDAR_LIB_DIR}/${CMAKE_BUILD_TYPE}" CACHE STRING "DLL/SO output directory" ${F})
endif(CEDAR_LIB_DIR)
# default output directory for exe files
if (CEDAR_EXE_DIR)
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CEDAR_EXE_DIR}" CACHE STRING "executable output directory" ${F})
endif(CEDAR_EXE_DIR)


########################################################################################################################
# library settings

# Shared or static libraries?
if (CEDAR_BUILD_STATIC_LIBS)
  set (CEDAR_LIB_TYPE STATIC)
else (CEDAR_BUILD_STATIC_LIBS)
  set (CEDAR_LIB_TYPE SHARED)
endif (CEDAR_BUILD_STATIC_LIBS)

# include the cedar library directory in the library search path
link_directories(${CEDAR_LIB_DIR})

########################################################################################################################
#include settings

# add the source directory to the ones that need to be included
include_directories(${CEDAR_HOME})

########################################################################################################################
# third party libraries

# Qt
find_package(Qt4 4.6.0 COMPONENTS QtCore REQUIRED)
include(${QT_USE_FILE})
set(CEDAR_THIRD_PARTY_LIBS ${CEDAR_THIRD_PARTY_LIBS} ${QT_LIBRARIES})
include_directories(${QT_INCLUDE_DIRS})

# Boost
if (${CMAKE_BUILD_STATIC_LIBS})
  set(Boost_USE_STATIC_LIBS ON)
else (${CMAKE_BUILD_STATIC_LIBS})
  set(Boost_USE_STATIC_LIBS OFF)
endif (${CMAKE_BUILD_STATIC_LIBS})

set(Boost_USE_MULTITHREADED ON)
find_package(Boost 1.40.0 COMPONENTS system date_time)
set(CEDAR_THIRD_PARTY_LIBS ${CEDAR_THIRD_PARTY_LIBS} ${Boost_LIBRARIES})

if(Boost_FOUND)
  include_directories(${Boost_INCLUDE_DIRS})
endif()

# OpenCV
set (OpenCV_DIR ${CEDAR_OPENCV_CMAKE_DIR})
find_package(OpenCV REQUIRED)
set(CEDAR_THIRD_PARTY_LIBS ${CEDAR_THIRD_PARTY_LIBS} ${OpenCV_LIBS})
message(STATUS ${OpenCV_LIBS})

# libconfig
set(CEDAR_THIRD_PARTY_LIBS ${CEDAR_THIRD_PARTY_LIBS} config++)

########################################################################################################################
# testing settings

# enable unit tests via ctest
enable_testing()


########################################################################################################################
# cedar libraries
file(GLOB cedarLibDirs ${CEDAR_SOURCE_DIR}/*/)

# remove svn directory from list
list(REMOVE_ITEM cedarLibDirs "${CEDAR_SOURCE_DIR}/.svn")
foreach (libDir ${cedarLibDirs})
  if (IS_DIRECTORY ${libDir} AND EXISTS "${libDir}/CMakeLists.txt")

    # get the name of the libary
    string(REPLACE ${CEDAR_SOURCE_DIR}/ "" libName "${libDir}")

    # add out-of-source directory tree
    set(subDir "${CEDAR_BUILD_DIR}/src/${libName}/${CMAKE_BUILD_TYPE}")

    # add the library to the cedar libraries
    set(CEDAR_LIBS ${CEDAR_LIBS} ${libName})

    # add the subdirectory
    add_subdirectory(${libDir} ${subDir})

  endif(IS_DIRECTORY ${libDir} AND EXISTS "${libDir}/CMakeLists.txt")
endforeach(libDir)

########################################################################################################################
# cedar unit tests
list(APPEND subdirectories ${CEDAR_UNIT_TEST_DIR})

set(numberOfSubdirectories 1)

while (${numberOfSubdirectories} STRGREATER 0)
  list(GET subdirectories 0 subdirectory)
  list(REMOVE_AT subdirectories 0)

  cedar_get_subdirectories(${subdirectory})

  foreach(newSubdirectory ${returnedSubdirectories})

    if (EXISTS "${newSubdirectory}/CMakeLists.txt")
      add_subdirectory(${newSubdirectory})
    endif (EXISTS "${newSubdirectory}/CMakeLists.txt")

    list(APPEND subdirectories ${newSubdirectory})
  endforeach(newSubdirectory)

  list(LENGTH subdirectories ${numberOfSubdirectories})
endwhile (${numberOfSubdirectories} STRGREATER 0)
