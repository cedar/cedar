// config file for CoRA
// units are meters, radians, radians/second
Name = "CoRA";
amtecInitString = "ESD:0,1000";

Object : // this gives the rigid transformation from the world frame to the base frame
{
  position = [ 0.0, 0.0, 0.0 ];
  orientation = [ 1.0, 0.0, 0.0,     0.0, 1.0, 0.0,     0.0, 0.0, 1.0 ]; // 3x3 matrix, row by row
};

// angle and velocity limits are still arbitrary and not taken from real hardware restrictions
joints = ( 
  {
    position = [ 0.0, 0.0, 0.5 ];
    axis = [ 0.0, 0.0, 1.0 ];
    angleLimits = [ -3.14, 3.14 ];
    velocityLimits = [ -1.2, 1.2 ];
  }, 
  {
    position = [ 0.0, 0.0, 0.5 ];
    axis = [ 0.0, 0.0, 1.0 ];
    angleLimits = [ -3.14, 3.14 ];
    velocityLimits = [ -1.2, 1.2 ];
  }, 
  {
    position = [ 0.0, 0.0, 0.5 ];
    axis = [ 0.0, 0.0, 1.0 ];
    angleLimits = [ -3.14, 3.14 ];
    velocityLimits = [ -1.2, 1.2 ];
  }, 
  {
    position = [ 0.0, 0.0, 0.5 ];
    axis = [ 0.0, 0.0, 1.0 ];
    angleLimits = [ -3.14, 3.14 ];
    velocityLimits = [ -1.2, 1.2 ];
  }, 
  {
    position = [ 0.0, 0.0, 0.5 ];
    axis = [ 0.0, 0.0, 1.0 ];
    angleLimits = [ -3.14, 3.14 ];
    velocityLimits = [ -1.2, 1.2 ];
  }, 
  {
    position = [ 0.0, 0.0, 0.5 ];
    axis = [ 0.0, 0.0, 1.0 ];
    angleLimits = [ -3.14, 3.14 ];
    velocityLimits = [ -1.2, 1.2 ];
  }, 
  {
    position = [ 0.0, 0.0, 0.5 ];
    axis = [ 0.0, 0.0, 1.0 ];
    angleLimits = [ -3.14, 3.14 ];
    velocityLimits = [ -1.2, 1.2 ];
  }, 
  {
    position = [ 0.0, 0.0, 0.5 ];
    axis = [ 0.0, 0.0, 1.0 ];
    angleLimits = [ -3.14, 3.14 ];
    velocityLimits = [ -1.2, 1.2 ];
  }, 
  {
    position = [ 0.0, 0.0, 0.5 ];
    axis = [ 0.0, 0.0, 1.0 ];
    angleLimits = [ -3.14, 3.14 ];
    velocityLimits = [ -1.2, 1.2 ];
  } );

endEffector : // this gives the rigid transformation from the base frame to the end-effector frame in reference configuration, i.e. all joint angles set to zero
{
  position = [ 1.2022, 0.0, 0.4205 ];
  orientation = [ 0.0, 0.0, -1.0,     -1.0, 0.0, 0.0,     0.0, 1.0, 0.0 ]; // 3x3 matrix, row by row
};

links = ( // mass and moments of inertia for the link segments -- not finalized yet, treat with care
  {
    centerOfMassPosition = [ 45.25, 0.5, 353.0 ];
    orientation = [ 90.0, 0.0, 135.0 ];
    inertiaMoments = [ 15.0, 15.0, 162.5 ];
  }, 
  {
    centerOfMassPosition = [ 158.0, 0.0, 375.25 ];
    orientation = [ 135.0, 0.0, -90.0 ];
    inertiaMoments = [ 15.0, 15.0, 162.5 ];
  }, 
  {
    centerOfMassPosition = [ 326.25, 0.0, 375.25 ];
    orientation = [ 201.5, 0.0, 90.5 ];
    inertiaMoments = [ 15.0, 15.0, 220.9 ];
  }, 
  {
    centerOfMassPosition = [ 489.5, 0.0, 455.75 ];
    orientation = [ 125.0, 0.0, 70.5 ];
    inertiaMoments = [ 15.0, 15.0, 143.5 ];
  }, 
  {
    centerOfMassPosition = [ 637.25, 0.0, 455.75 ];
    orientation = [ 170.5, 0.0, -70.5 ];
    inertiaMoments = [ 15.0, 15.0, 184.5 ];
  }, 
  {
    centerOfMassPosition = [ 792.5, 0.0, 420.5 ];
    orientation = [ 140.0, 0.0, 0.0 ];
    inertiaMoments = [ 15.0, 15.0, 140.0 ];
  }, 
  {
    centerOfMassPosition = [ 903.5, 0.0, 420.5 ];
    orientation = [ 82.0, 0.0, 0.0 ];
    inertiaMoments = [ 15.0, 15.0, 82.0 ];
  }, 
  {
    centerOfMassPosition = [ 1073.5, 0.0, 420.5 ];
    orientation = [ 258.0, 0.0, 0.0 ];
    inertiaMoments = [ 15.0, 15.0, 258.0 ];
  } );

threadStepSize = 100.0;
threadIdleTime = 0.001;
threadUseFixedStepSize = true;
threadSimulatedTime = 0.0;

amtecModuleMap = [ 3, 4, 5, 6, 15, 21, 7, 8, 9 ];